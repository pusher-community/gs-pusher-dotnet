@{
    ViewBag.Title = "Pusher Trigger Event Code Sample";
}

<h1>Pusher Trigger Event Code Sample</h1>

<p class="description">
    Pusher is an Evented PubSub system. This example shows you how to trigger an event on a channel from the server.
</p>

<p class="use-case">
    This demonstrates the most common and simple use case, simple messaging. It's the foundation upon which most real-time applications and use cases are built upon.
</p>

<h2>Instructions</h2>

<p class="page-instructions">
    Take a look at the source of <a href="https://github.com/pusher-community/gs-pusher-dotnet/blob/master/gs-pusher-dotnet/Views/Trigger/Index.cshtml">Views/Trigger/Index.cshtml</a> and <a href="https://github.com/pusher-community/gs-pusher-dotnet/blob/master/gs-pusher-dotnet/Controllers/TriggerController.cs">TriggerController.cs</a>. Additionally, view the output to the JavaScript console in your browser developer tools.
</p>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "trigger_form" }))
{
    <p>
        Enter a message in the <code>input</code> and click the <code>Trigger</code> button. This will result in an AJAX request being sent to the <code>/trigger</code> route in <code>server.js</code> which will trigger an event via Pusher.
    </p>
    <input id="trigger_message" type="text" name="message" placeholder="enter text" />
    <input type="submit" value="Trigger" />
}

<p>Please note, this example also uses jQuery from a CDN.</p>

@section Scripts
{
    <script>
        /*
            Log debug information to the browser console.
        */
        Pusher.log = function (msg) {
            console.log(msg);
        };

        /*
            Create a new Pusher instance and connect to Pusher.
        */
        var appKey = '@ViewBag.PusherAppKey';
        var pusher = new Pusher(appKey);

        /*
            Subscribe to the channel.
        */
        var channel = pusher.subscribe('my-channel');

        /*
            Bind to the subscription success event and handle it with an inline function.
        */
        channel.bind('pusher:subscription_succeeded', function () {
            console.log('Success!');
        });

        /*
            Bind to the custom event, `my-event`, and handle with an inline function.
            When the event is received an alert will be shown using the `.message` property of the incoming event payload.
        */
        channel.bind('my-event', function (data) {
            alert('A message has been received: ' + data.message);
        });

        /*
            Handle the submission of the form used to send data to the server.
            That data will then be sent via Pusher.
        */
        jQuery('#trigger_form').submit(function (e) {
            // Prevent the normal form submission from taking place
            e.preventDefault();

            var formEl = jQuery(this);

            // Get the data from the `input` form element
            var inputMessage = formEl.find('#trigger_message').val();

            // Build the data to be submitted. A single form value will be sent called `message`
            var submitData = { message: inputMessage };

            // Make the POST request to `/trigger`
            jQuery.post(formEl.attr('action'), submitData);
        });

    </script>
}